# 1. Character Input
#    Create a program that asks the user to enter their name and their age.
# 2. Odd Or Even
#    Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.
# 3. List Less Than Ten
#    Take a list, say for example this one:
#    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
#    and write a program that prints out all the elements of the list that are less than 5.
# 4. Divisors
#    Create a program that asks the user for a number and then prints out a list of all the divisors of that number.
# 5. List Overlap
#    Take two lists, say for example these two:
#    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
#    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
#    and write a program that returns a list that contains only the elements that are common between the lists (without duplicates).
# 6. String Lists
#    Ask the user for a string and print out whether this string is a palindrome or not.
# 7. List Comprehensions
#    Let’s say I give you a list saved in a variable:
#    a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#    Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.
# 8. Rock Paper Scissors
#    Make a two-player Rock-Paper-Scissors game using input().
# 9. Guessing Game One
#    Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number,
#    then tell them whether they guessed too low, too high, or exactly right.
# 10. List Overlap Comprehensions
#     Revisiting an old exercise (see Exercise 5),
#     Take two lists, say for example these two:
#     and write a program that returns a list that contains only the elements that are common between the lists (without duplicates).
# 11. Check Primality Functions
#     Ask the user for a number and determine whether the number is prime or not.
# 12. List Ends
#     Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and
#     makes a new list of only the first and last elements of the given list
# 13. Fibonacci
#     Write a program that asks the user how many Fibonnaci numbers to generate and then generates them.
#     Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.
#     (Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence.
#     The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, …)
# 14. List Remove Duplicates
#     Write a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.
#     Write two different functions to do this - one using a loop and constructing a list, and another using sets.
# 15. Reverse Word Order
#     Write a program (using functions!) that asks the user for a long string containing multiple words.
#     Print back to the user the same string, except with the words in backwards order.
#     For example, say I type the string:
#     My name is Michele
#     Then I would see the string:
#     Michele is name My
#     shown back to me.
# 16. Password Generator
#     Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters,
#     numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password.
#     Include your run-time code in a main method.
#     Extra:
#     Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.
# 17. Cows And Bulls
#     Create a program that will play the “cows and bulls” game with the user. The game works like this:
#     Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place,
#     they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess,
#     tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses
#     the user makes throughout teh game and tell the user at the end.
#     Say the number generated by the computer is 1038. An example interaction could look like this:
#     Welcome to the Cows and Bulls Game!
#     Enter a number:
#     >>> 1234
#     2 cows, 0 bulls
#     >>> 1256
#     1 cow, 1 bull
#     ...
# 18. Element Search
#     Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to largest) and another number.
#     The function decides whether or not the given number is inside the list and returns (then prints) an appropriate boolean.
#     Extras:
#     Use binary search.
# 19. Read A File
#     Given a .txt file that has a list of a bunch of names,
#     count how many of each name there are in the file, and print out the results to the screen.
